export { VERSION } from './version.js';
export { Actor, type ActorId, type ActorJurisdiction, type ActorLocationHint, type ActorNamespace, type ActorNamespaceNewUniqueIdOptions, type ActorState, type ActorStorage, type ActorStub } from './actor.js';
export { type Ai, type AiModel, type AiModelInputMap, type AiModelOutputMap, type AiOptions, type ExtendedAiOptions, type GatewayOptions, getModelInfo, getModelsByCapability, MODEL_CATALOG, type AvailableModel, type ModelCatalogEntry, type ModelCapability, type OpenAIChatInput, type OpenAIChatOutput, type OpenAIEmbeddingOutput, type OpenAIAudioOutput, type RerankerInput, type SummarizationInput, type TranslationInput, type TextClassificationInput, type ImageGenerationInput, type ImageClassificationInput, type VisionInput, type TTSInput, type AudioInput } from './ai.js';
export { type Annotation } from './annotation.js';
export { type Bucket, type BucketChecksums, type BucketEventNotification, type BucketGetOptions, type BucketHTTPMetadata, type BucketListOptions, type BucketObject, type BucketObjectBody, type BucketObjects, type BucketPutOptions, type BucketRange, type BucketStringChecksums } from './bucket.js';
export { type KvCache, type KvCacheGetOptions, type KvCacheGetWithMetadataResult, type KvCacheListKey, type KvCacheListOptions, type KvCachePutOptions } from './kv_cache.js';
export { type KvCache as KvStore, type KvCacheGetOptions as KvStoreGetOptions, type KvCacheGetWithMetadataResult as KvStoreGetWithMetadataResult, type KvCacheListKey as KvStoreListKey, type KvCacheListOptions as KvStoreListOptions, type KvCachePutOptions as KvStorePutOptions } from './kv_cache.js';
export { type MRNObject } from './mrn.js';
export { Batch, Each } from './observer.js';
export { type Message, type MessageBatch, type MessageSendRequest, type Queue, type QueueRetryOptions, type QueueSendBatchOptions, type QueueSendOptions } from './queue.js';
export { Service, type ServiceStub } from './service.js';
export { type ExecutionContext } from './shared.js';
export { type CreatePageSummaryInput, type CreatePageSummaryOutput, type DocumentChatInput, type DocumentChatOutput, type GetPaginatedResultsInput, type GetPaginatedResultsOutput, type PaginationInfo, type RagSearchInput, type RagSearchOutput, type SearchInput, type SearchOutput, type SearchResult, type SmartBucket, type SmartBucketSearch } from './smartbucket.js';
export { type MemoryEntry, type NewMemoryEntry, type ProceduralMemorySearchQuery, type ProcedureEntry, type SmartMemory, type SmartProceduralMemory, type SmartWorkingMemory, type WorkingMemoryQuery, type WorkingMemorySearchQuery } from './smartmemory.js';
export { type SmartSql, type SmartSqlInstance } from './smartsql.js';
export { type SqlDatabase, type SqlExecResult, type SqlPreparedStatement, type SqlResult } from './sql_database.js';
export { Task, type Event } from './task.js';
export { type VectorFloatArray, type VectorIndex, type VectorIndexAsyncMutation, type VectorIndexDistanceMetric, type VectorIndexError, type VectorIndexIndex, type VectorIndexIndexConfig, type VectorIndexIndexDetails, type VectorIndexIndexInfo, type VectorIndexMatch, type VectorIndexMatches, type VectorIndexMetadataRetrievalLevel, type VectorIndexQueryOptions, type VectorIndexVector, type VectorIndexVectorMetadata, type VectorIndexVectorMetadataFilter, type VectorIndexVectorMetadataFilterOp, type VectorIndexVectorMetadataValue, type VectorIndexVectorMutation } from './vector_index.js';
/**
 * LogLevel is a logging level.
 */
export declare enum LogLevel {
    DEBUG = "DEBUG",
    INFO = "INFO",
    WARN = "WARN",
    ERROR = "ERROR"
}
/**
 * Fields is a structured log message field.
 */
export interface LogFields {
    [key: string]: number | string | boolean | object | undefined | null | Error | LogFields;
}
/**
 * Error is a structured error message.
 */
export interface Error {
    cause?: string;
    stack?: string;
    message: string;
}
/**
 * LogMessage is a structured log message.
 */
export interface LogMessage {
    level: LogLevel;
    message: string;
    fields: LogFields;
}
/**
 * LogSink is a function that accepts a LogMessage and sends it some destination.
 */
export type LogSink = (m: LogMessage) => void;
/**
 * Logger is a logging interface for the runtime-provided logger.
 */
export interface Logger {
    /** Creates a new logger with additional context fields
     * @param fields Additional fields to include in all log messages
     * @returns A new logger instance with the combined fields
     */
    with(fields?: LogFields): Logger;
    /** Logs a message at the default level (INFO)
     * @param message The message to log
     * @param fields Optional fields to include with this message
     */
    log(message: string, fields?: LogFields): void;
    /** Logs a message at the specified level
     * @param level The log level to use
     * @param message The message to log
     * @param fields Optional fields to include with this message
     */
    logAtLevel(level: LogLevel, message: string, fields?: LogFields): void;
    /** Creates a log message at the default level (INFO) without sending it
     * @param message The message text
     * @param fields Optional fields to include
     * @returns The constructed log message
     */
    message(message: string, fields?: LogFields): LogMessage;
    /** Creates a log message at the specified level without sending it
     * @param level The log level to use
     * @param message The message text
     * @param fields Optional fields to include
     * @returns The constructed log message
     */
    messageAtLevel(level: LogLevel, message: string, fields?: LogFields): LogMessage;
    /** Logs a DEBUG level message
     * @param message The message to log
     * @param fields Optional fields to include
     */
    debug(message: string, fields?: LogFields): void;
    /** Logs an INFO level message
     * @param message The message to log
     * @param fields Optional fields to include
     */
    info(message: string, fields?: LogFields): void;
    /** Logs a WARN level message
     * @param message The message to log
     * @param fields Optional fields to include
     */
    warn(message: string, fields?: LogFields): void;
    /**
     * withError attaches an error to the logger context.
     * @param error The error to attach
     * @param field Optional fields to include
     */
    withError(error: unknown, field?: LogFields): Logger;
    /** Logs an ERROR level message
     * @param message The message to log
     * @param fields Optional fields to include
     */
    error(message: string, fields?: LogFields): void;
}
/**
 * Tracer provides tracing capabilities for Raindrop applications.
 */
export interface Tracer {
    span<T>(name: string, fn: (event: Record<string, unknown>) => Promise<Awaited<T>>): Promise<Awaited<T>>;
}
export type App = {
    organizationId: string;
    applicationName: string;
    versionId: string;
    scriptName: string;
};
export type { CompleteResourceTemplateCallback, ListResourcesCallback, PromptArgsRawShape, PromptCallback, RaindropMcpServer, ReadResourceCallback, ReadResourceTemplateCallback, RegisteredPrompt, RegisteredResource, RegisteredResourceTemplate, RegisteredTool, ResourceMetadata, ResourceTemplate, ToolCallback } from './mcp.js';
//# sourceMappingURL=index.d.ts.map