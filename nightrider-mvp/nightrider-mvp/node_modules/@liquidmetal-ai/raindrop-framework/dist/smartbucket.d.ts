import { Bucket } from './bucket.js';
/** Search result from RetrieverAgent */
export interface SearchResult {
    chunkSignature?: string;
    text?: string;
    source?: string;
    payloadSignature?: string;
    score?: number;
    embed?: Float32Array;
    type?: string;
}
/** Pagination information */
export interface PaginationInfo {
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
    hasMore: boolean;
}
/** Input for RAG search */
export interface RagSearchInput {
    input: string;
    requestId: string;
    partition?: string;
}
/** Output from RAG search */
export interface RagSearchOutput {
    results: SearchResult[];
}
/** Input for document chat */
export interface DocumentChatInput {
    objectId: string;
    input: string;
    requestId: string;
    partition?: string;
}
/** Output from document chat */
export interface DocumentChatOutput {
    answer: string;
}
/** Input for supervisor agent */
export interface SearchInput {
    input: string;
    requestId?: string;
    partition?: string;
}
/** Output from supervisor agent */
export interface SearchOutput {
    results: SearchResult[];
    pagination: PaginationInfo;
}
/** Input for creating page summary */
export interface CreatePageSummaryInput {
    requestId?: string;
    page: number;
    pageSize: number;
    partition?: string;
}
/** Output from creating page summary */
export interface CreatePageSummaryOutput {
    summary: string;
}
/** Input for getting paginated results */
export interface GetPaginatedResultsInput {
    requestId: string;
    page?: number;
    pageSize?: number;
    partition?: string;
}
/** Output from getting paginated results */
export interface GetPaginatedResultsOutput {
    results: SearchResult[];
    pagination: PaginationInfo;
}
/** SmartBucket search methods matching RetrieverAgent */
export interface SmartBucketSearch {
    /**
     * Performs complex search with set operations and pagination (maps to runSupervisorAgent)
     * @param input - The search input
     * @returns Promise resolving to search results with pagination
     */
    search(input: SearchInput): Promise<SearchOutput>;
    /**
     * Performs RAG search for chunks/sections within objects (maps to ragSearch)
     * @param input - The RAG search input
     * @returns Promise resolving to RAG search results
     */
    chunkSearch(input: RagSearchInput): Promise<RagSearchOutput>;
    /**
     * Performs document-based chat/Q&A (maps to documentChat)
     * @param input - The document chat input
     * @returns Promise resolving to chat response
     */
    documentChat(input: DocumentChatInput): Promise<DocumentChatOutput>;
    /**
     * Gets paginated results from a previous search
     * @param input - The pagination input
     * @returns Promise resolving to paginated results
     */
    getPaginatedResults(input: GetPaginatedResultsInput): Promise<GetPaginatedResultsOutput>;
}
/** Interface for smart bucket operations that extends basic bucket functionality */
export interface SmartBucket extends Bucket, SmartBucketSearch {
}
//# sourceMappingURL=smartbucket.d.ts.map