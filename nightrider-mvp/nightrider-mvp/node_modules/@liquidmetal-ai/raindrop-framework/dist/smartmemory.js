export {};
/*
// Working Memory Sessions
StartWorkingMemorySession()->{Session, Status}
EndWorkingMemorySession(Session, Flush)->Status;
RehydrateWorkingMemorySession(Session)->Status; //restore from snapshot

// optional to use, otherwise defaults to a single *defaultTimeline for the Session
OpenTimeline(Session, string name) -> {Status, Timeline?}; // name â†’ timeline, default to "*defaultTimeline"
CloseTimeline(Timeline) -> Status;

// bookmarking a snapshot of the entire working memory
BookmarkWorkingMemorySession(string annotation) -> {Status, Bookmark?};

// reads/writes of memory in the context of some Session
// get is an exact match on an optional needle
GetWorkingMemory(Session, Timeline?, Key?, NMostRecent, StartTime?, EndTime?) -> {Status, [Entry]?};
// search is a search for nearest matches with required needle
SearchWorkingMemory(Session, Timeline?, Needle, NMostRecent, StartTime?, EndTime?) -> {Status, [Entry]?};
PutWorkingMemory(Session, Timeline?, Entry, Key?) -> Status;
DeleteWorkingMemory(Entry.id)-> Status;

// Episodic Memory (EM) - Long-term context
GetEpisodicMemory(SessionId)->{Succes, Document} // standard object get
SearchEpisodicMemory(Needle, ?StartTime, ?EndTime)->{Success, DocumentSearchResponse} // standard SB document search
PutEpisodicMemory(Memory, StartTime, EndTime)
deleteEpisodicMemory(sessionId) -> {success}; // standard object delete

// Semantic Memory (SM) - Facts & knowledge
GetSemanticMemory(SessionId) -> {Succes, Document} // standard object get
searchSemanticMemory(Needle) -> {Success, DocumentSearchResponse} // standard SB document search
putSemanticMemory() -> {}; // just standard smartbucket input
deleteSemanticMemory(objectKey) -> {success}; // standard smartbucket delete

// Procedural Memory (PM) - Skills & procedures
getProceduralMemory(SemanticMemoryId) -> {Succes, Document} // standard object get
searchProceduralMemory(Needle) -> {Success, DocumentSearchResponse} // standard SB document search
putProceduralMemory(SemanticMemoryId) -> {}; // standard sb put
deleteProceduralMemory(SemanticMemoryId) -> {}; // standard SB delete
*/
