export interface KvCacheListKey<Metadata, Key extends string = string> {
    name: Key;
    expiration?: number;
    metadata?: Metadata;
}
export type KvCacheListResult<Metadata, Key extends string = string> = {
    list_complete: false;
    keys: KvCacheListKey<Metadata, Key>[];
    cursor: string;
    cacheStatus: string | null;
} | {
    list_complete: true;
    keys: KvCacheListKey<Metadata, Key>[];
    cacheStatus: string | null;
};
export interface KvCache<Key extends string = string> {
    get(key: Key, options?: Partial<KvCacheGetOptions<undefined>>): Promise<string | null>;
    get(key: Key, type: 'text'): Promise<string | null>;
    get<ExpectedValue = unknown>(key: Key, type: 'json'): Promise<ExpectedValue | null>;
    get(key: Key, type: 'arrayBuffer'): Promise<ArrayBuffer | null>;
    get(key: Key, type: 'stream'): Promise<ReadableStream | null>;
    get(key: Key, options?: KvCacheGetOptions<'text'>): Promise<string | null>;
    get<ExpectedValue = unknown>(key: Key, options?: KvCacheGetOptions<'json'>): Promise<ExpectedValue | null>;
    get(key: Key, options?: KvCacheGetOptions<'arrayBuffer'>): Promise<ArrayBuffer | null>;
    get(key: Key, options?: KvCacheGetOptions<'stream'>): Promise<ReadableStream | null>;
    list<Metadata = unknown>(options?: KvCacheListOptions): Promise<KvCacheListResult<Metadata, Key>>;
    put(key: Key, value: string | ArrayBuffer | ArrayBufferView | ReadableStream, options?: KvCachePutOptions): Promise<void>;
    getWithMetadata<Metadata = unknown>(key: Key, options?: Partial<KvCacheGetOptions<undefined>>): Promise<KvCacheGetWithMetadataResult<string, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, type: 'text'): Promise<KvCacheGetWithMetadataResult<string, Metadata>>;
    getWithMetadata<ExpectedValue = unknown, Metadata = unknown>(key: Key, type: 'json'): Promise<KvCacheGetWithMetadataResult<ExpectedValue, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, type: 'arrayBuffer'): Promise<KvCacheGetWithMetadataResult<ArrayBuffer, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, type: 'stream'): Promise<KvCacheGetWithMetadataResult<ReadableStream, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, options: KvCacheGetOptions<'text'>): Promise<KvCacheGetWithMetadataResult<string, Metadata>>;
    getWithMetadata<ExpectedValue = unknown, Metadata = unknown>(key: Key, options: KvCacheGetOptions<'json'>): Promise<KvCacheGetWithMetadataResult<ExpectedValue, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, options: KvCacheGetOptions<'arrayBuffer'>): Promise<KvCacheGetWithMetadataResult<ArrayBuffer, Metadata>>;
    getWithMetadata<Metadata = unknown>(key: Key, options: KvCacheGetOptions<'stream'>): Promise<KvCacheGetWithMetadataResult<ReadableStream, Metadata>>;
    delete(key: Key): Promise<void>;
}
export interface KvCacheListOptions {
    limit?: number;
    prefix?: string | null;
    cursor?: string | null;
}
export interface KvCacheGetOptions<Type> {
    type: Type;
    cacheTtl?: number;
}
export interface KvCachePutOptions {
    expiration?: number;
    expirationTtl?: number;
    metadata?: any | null;
}
export interface KvCacheGetWithMetadataResult<Value, Metadata> {
    value: Value | null;
    metadata: Metadata | null;
    cacheStatus: string | null;
}
//# sourceMappingURL=kv_cache.d.ts.map