import { describe, expect, it } from 'vitest';
import { makeD1Database } from '.';
import { DB } from '../fixtures/timestamp/types';
import { Kysely } from 'kysely';
import { D1Dialect } from 'kysely-d1';

describe('fixtures/rainbow-service', async () => {
  it('successfully loads database', async () => {
    await makeD1Database({ migrations: './fixtures/rainbow-service/migrations' });
  });
});

describe('fixtures/timestamp', async () => {
  it('inserts a current timestamp column at the present timestamp', async () => {
    const db = new Kysely<DB>({
      dialect: new D1Dialect({ database: await makeD1Database({ migrations: './fixtures/timestamp/migrations' }) }),
    });

    await db
      .insertInto('Example')
      .values({
        exampleId: '1',
        updatedAtNowLocaltime: new Date().toISOString(),
        updatedAtNowUTC: new Date().toISOString(),
        updatedAtCurrentTimestamp: new Date().toISOString(),
        updatedAtStrftime: new Date().toISOString(),
      })
      .execute();

    const {
      createdAtNowLocaltime,
      updatedAtNowLocaltime,
      timediffNowLocaltime,
      createdAtNowUTC,
      updatedAtNowUTC,
      timediffNowUTC,
      createdAtCurrentTimestamp,
      updatedAtCurrentTimestamp,
      timediffCurrentTimestamp,
      createdAtStrftime,
      updatedAtStrftime,
      timediffStrftime,
    } = await db
      .selectFrom('Example')
      .select(({ fn }) => [
        'createdAtNowLocaltime',
        'updatedAtNowLocaltime',
        fn<string>('timediff', ['createdAtNowLocaltime', 'updatedAtNowLocaltime']).as('timediffNowLocaltime'),
        'createdAtNowUTC',
        'updatedAtNowUTC',
        fn<string>('timediff', ['createdAtNowUTC', 'updatedAtNowUTC']).as('timediffNowUTC'),
        'createdAtCurrentTimestamp',
        'updatedAtCurrentTimestamp',
        fn<string>('timediff', ['createdAtCurrentTimestamp', 'updatedAtCurrentTimestamp']).as(
          'timediffCurrentTimestamp',
        ),
        'createdAtStrftime',
        'updatedAtStrftime',
        fn<string>('timediff', ['createdAtStrftime', 'updatedAtStrftime']).as('timediffStrftime'),
      ])
      .where('exampleId', '=', '1')
      .executeTakeFirstOrThrow();

    const deltaNowLocalTime = Math.abs(Date.parse(updatedAtNowLocaltime) - Date.parse(createdAtNowLocaltime));
    const deltaNowUTC = Math.abs(Date.parse(updatedAtNowUTC) - Date.parse(createdAtNowUTC));
    const deltaCurrentTimestamp = Math.abs(
      Date.parse(updatedAtCurrentTimestamp) - Date.parse(createdAtCurrentTimestamp),
    );
    const deltaStrftime = Math.abs(Date.parse(updatedAtStrftime) - Date.parse(createdAtStrftime));

    console.log({
      updatedAtNowLocaltime,
      createdAtNowLocaltime,
      updatedAtNowLocaltimeParsed: new Date(Date.parse(updatedAtNowLocaltime)).toISOString(),
      createdAtNowLocaltimeParsed: new Date(Date.parse(createdAtNowLocaltime)).toISOString(),
      timediffNowLocaltime,
      deltaNowLocalTime,

      updatedAtNowUTC,
      createdAtNowUTC,
      updatedAtNowUTCParsed: new Date(Date.parse(updatedAtNowUTC)).toISOString(),
      createdAtNowUTCParsed: new Date(Date.parse(createdAtNowUTC)).toISOString(),
      timediffNowUTC,
      deltaNowUTC,

      updatedAtCurrentTimestamp,
      createdAtCurrentTimestamp,
      updatedAtCurrentTimestampParsed: new Date(Date.parse(updatedAtCurrentTimestamp)).toISOString(),
      createdAtCurrentTimestampParsed: new Date(Date.parse(createdAtCurrentTimestamp)).toISOString(),
      timediffCurrentTimestamp,
      deltaCurrentTimestamp,

      updatedAtStrftime,
      createdAtStrftime,
      updatedAtStrftimeParsed: new Date(Date.parse(updatedAtStrftime)).toISOString(),
      createdAtStrftimeParsed: new Date(Date.parse(createdAtStrftime)).toISOString(),
      timediffStrftime,
      deltaStrftime,
    });

    expect(deltaNowLocalTime).toBeLessThan(5000);
    // local development may have different results than what is experienced in
    // CI
    //
    // expect(deltaNowUTC).toBeGreaterThan(5000);
    // expect(deltaCurrentTimestamp).toBeGreaterThan(5000);
    expect(deltaStrftime).toBeLessThan(5000);
  });
});
